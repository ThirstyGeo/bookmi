[
["more-topics-on-multiple-imputation-and-regression-modelling.html", "Chapter 6 More topics on Multiple Imputation and Regression Modelling 6.1 Regression modeling with categorical covariates 6.2 Logistic regression with a categorical variable in R 6.3 Cox Regression with a categorical variable in R 6.4 Variable selection 6.5 Interaction terms in model", " Chapter 6 More topics on Multiple Imputation and Regression Modelling This Chapter is a follow-up on the previous Chapter 5 about data analysis with Multiple Imputation. In this Chapter, we will deal with some specific topics when you perform regression modeling in multiple imputed datasets. 6.1 Regression modeling with categorical covariates For categorical covariates, SPSS does not generate a pooled p-value for the overall Wald test. This is equal to not presenting a pooled Chi-square value in SPSS because the overall Wald value is a Chi-square value that represents the relationship between variables with &gt; 2 categories and the outcome. An example is shown in Figure 6.1, where the relationshp between a categorical version of the Tampa scale variable (categories 0 = low fear of movement, 1 = middle fear of movement and 2 is a high fear of movement) and the outcome Radiation (in the leg, 1=yes, 0=no) is pesented after MI in 5 imputed datasets. The overall Wald test and p-value is presented for each imputed dataset (in the row with a df of 2), but is missing for the pooled model. This is also the case for Cox regression models. Figure 6.1: Logistic Regresion with an independent categorical variable. There are several procedures to derive a pooled p-value for categorical variables, the pooled sampling variance or D1 method, the multiple parameter Wald test or D2 method, and the Meng and Rubin pooling procedure (Van Buuren (2018); Enders (2010); Eekhout, Wiel, and Heymans (2017); Meng and Rubin (1992); Mistler (2013); Marshall et al. (2009)). A more simple procedures to derive a pooled p-value for the overall Wald test is just taking the median of the p-values from the overall Wald test of all imputed datasets, this rule is called the Median P Rule (MPR) (Eekhout, Wiel, and Heymans (2017)). These methods can only be performed in R. 6.2 Logistic regression with a categorical variable in R Pooling can be done by using the psfmi package that is downloadable via Github. The package needs R version 3.4.4 or higher. The package contains a function called psfmi_lr for pooling of logistic regression models and psfmi_coxr, to pool right censored Cox regression models. Install the package by first running: install.packages(&quot;devtools&quot;) library(devtools) devtools::install_github(&quot;mwheymans/psfmi&quot;) library(psfmi) Than run the following code to pool the logistic regression model with as independent variable the categorical Tampa scale variable and as outcome the Radiation variable. To derive the pooled p-value for the overall Wald test, the D1 method is used. Other settings that can be used for method=, are “D2” for the D2 pooling method, “MR” for the Meng and Rubin method and “MPR” for the Median P Rule. library(foreign) library(psfmi) data &lt;- read.spss(file=&quot;Backpain 150 Missing_Tampa_Cat Imp.sav&quot;, to.data.frame = TRUE) ## re-encoding from UTF-8 psfmi_lr(data=data, nimp=5, impvar=&quot;Imputation_&quot;, Outcome=&quot;Radiation&quot;, cat.predictors=c(&quot;Tampa_Cat&quot;), method=&quot;D1&quot;) ## ## Step 1 ## ## Variables included in model = factor(Tampa_Cat) ## ## Pooled model (Rubin&#39;s Rules) ## est std.err signif lower upper OR L.OR ## (Intercept) -0.7843 0.3330 0.0186 -1.4374 -0.1313 0.4564 0.2375 ## factor(Tampa_Cat)2 0.3526 0.4319 0.4143 -0.4940 1.1993 1.4228 0.6102 ## factor(Tampa_Cat)3 0.6304 0.4573 0.1691 -0.2698 1.5307 1.8784 0.7635 ## U.OR ## (Intercept) 0.8770 ## factor(Tampa_Cat)2 3.3178 ## factor(Tampa_Cat)3 4.6214 ## ## Mixed Pooled p-values (D1 &amp; RR) ## Chi.sq Pooled.P.value ## factor(Tampa_Cat) 1.002 0.368 ## ## Final results of Pooled model ## with a p-value of 1 Pooling a multivariable regression model that contains a mix of continuous, dichotomous and categorical variables can easily be performed with the psfmi_lr function. With the following code example, pooling is done in 10 multiple imputed datasets that are stored in the file lbpmilr (see ?lbpmilr for more information about the dataset) . The relationship with the outcome variable “Chronic” is estimated, using a model with 2 dichotomous, 4 continuous and 2 categorical variables. The pooling method is the Meng and Rubin procedure, indicated by method=&quot;MR&quot;. library(foreign) library(psfmi) psfmi_lr(data=lbpmilr, nimp=10, impvar=&quot;Impnr&quot;, Outcome=&quot;Chronic&quot;, predictors=c(&quot;Gender&quot;, &quot;Smoking&quot;, &quot;Function&quot;, &quot;JobControl&quot;, &quot;JobDemands&quot;, &quot;SocialSupport&quot;), cat.predictors = c(&quot;Carrying&quot;, &quot;Satisfaction&quot;), method=&quot;MR&quot;, print.method = FALSE) ## ## Step 1 ## ## Variables included in model = Gender Smoking Function JobControl JobDemands SocialSupport factor(Carrying) factor(Satisfaction) ## ## Mixed Pooled p-values (RR / MR) ## ## Pooled model (Rubin&#39;s Rules) ## est std.err signif lower upper OR ## (Intercept) -1.0450 2.5726 0.6846 -6.0875 3.9975 0.3517 ## Gender -0.4100 0.4635 0.3765 -1.3190 0.4989 0.6636 ## Smoking 0.0334 0.3756 0.9291 -0.7028 0.7696 1.0340 ## Function -0.0828 0.0491 0.0915 -0.1790 0.0134 0.9205 ## JobControl -0.0050 0.0204 0.8050 -0.0450 0.0349 0.9950 ## JobDemands 0.0057 0.0390 0.8838 -0.0707 0.0821 1.0057 ## SocialSupport 0.0549 0.0585 0.3479 -0.0598 0.1697 1.0565 ## factor(Carrying)2 1.3114 0.5276 0.0130 0.2765 2.3463 3.7115 ## factor(Carrying)3 2.2395 0.5942 0.0002 1.0719 3.4070 9.3882 ## factor(Satisfaction)2 -0.5464 0.4887 0.2642 -1.5073 0.4145 0.5790 ## factor(Satisfaction)3 -1.1034 0.5860 0.0600 -2.2532 0.0465 0.3317 ## lower.EXP upper.EXP ## (Intercept) 0.0023 54.4592 ## Gender 0.2674 1.6470 ## Smoking 0.4952 2.1590 ## Function 0.8361 1.0135 ## JobControl 0.9560 1.0356 ## JobDemands 0.9318 1.0855 ## SocialSupport 0.9420 1.1849 ## factor(Carrying)2 1.3186 10.4471 ## factor(Carrying)3 2.9208 30.1761 ## factor(Satisfaction)2 0.2215 1.5136 ## factor(Satisfaction)3 0.1051 1.0476 ## ## Mixed p-values (MR &amp; RR) ## Gender 0.37650 ## Smoking 0.92910 ## Function 0.09150 ## JobControl 0.80500 ## JobDemands 0.88380 ## SocialSupport 0.34790 ## factor(Carrying) 0.00067 ## factor(Satisfaction) 0.17475 ## ## Final results of Pooled model ## with a p-value of 1 In the final table that is called “Mixed p-values (MR &amp; RR)”, the pooled p-values can be found for all variables, including the categorical variables that are pooled by the Meng and Rubin procedure. For the dichotomous and continuous variables the pooled p-value estimated by Rubin’s Rules is reported. These are equal to the p-values in the first table under “Pooled model (Rubin’s Rules)”. You can set print.method = TRUE, to obtain the table with the pooled p-values by the Meng and Rubin method for all variables. 6.3 Cox Regression with a categorical variable in R In the psfmi package, a function that is called psfmi_coxris also available to obtain overall pooled p-values for categorical variables in Cox regression models, because this is also not possible in SPSS. All pooling methods can be applied, except for the Meng and Rubin procedure. The Meng and Rubin procedure is not recommended to use for Cox regression models (Marshall et al. (2009)). To pool a Cox regression model with a mix of continuous and dichotomous variables and 1 categorical variable over 10 impted datasets (see ?psfmi::lbpmicox for more information on the dataset) and pooling method “D1” use: library(foreign) library(psfmi) psfmi_coxr(data=lbpmicox, nimp=10, impvar=&quot;Impnr&quot;, time=&quot;Time&quot;, status=&quot;Status&quot;, predictors=c(&quot;Duration&quot;, &quot;Radiation&quot;, &quot;Onset&quot;, &quot;Function&quot;, &quot;Age&quot;, &quot;Previous&quot;, &quot;Tampascale&quot;, &quot;JobControl&quot;, &quot;JobDemand&quot;, &quot;Social&quot;), cat.predictors=c(&quot;Expect_cat&quot;), method=&quot;D1&quot;, print.method = FALSE) ## ## Step 1 ## ## Variables included in model = Duration Radiation Onset Function Age Previous Tampascale JobControl JobDemand Social factor(Expect_cat) ## ## Pooled model (Rubin&#39;s Rules) ## est std.err signif lower upper HR L.HR ## Duration -0.0078 0.0040 0.0513 -0.0156 0.0000 0.9922 0.9845 ## Radiation -0.0748 0.1534 0.6258 -0.3754 0.2258 0.9279 0.6870 ## Onset -0.0937 0.1759 0.5944 -0.4385 0.2511 0.9106 0.6450 ## Function 0.0439 0.0169 0.0092 0.0109 0.0769 1.0449 1.0110 ## Age -0.0089 0.0077 0.2485 -0.0240 0.0062 0.9911 0.9763 ## Previous -0.0995 0.1992 0.6176 -0.4899 0.2910 0.9053 0.6127 ## Tampascale -0.0235 0.0138 0.0893 -0.0506 0.0036 0.9768 0.9507 ## JobControl -0.0083 0.0083 0.3168 -0.0247 0.0080 0.9917 0.9756 ## JobDemand -0.0218 0.0155 0.1597 -0.0522 0.0086 0.9784 0.9491 ## Social -0.0515 0.0249 0.0387 -0.1002 -0.0027 0.9498 0.9047 ## factor(Expect_cat)2 0.2435 0.2308 0.2914 -0.2088 0.6958 1.2757 0.8116 ## factor(Expect_cat)3 0.2279 0.2002 0.2549 -0.1644 0.6203 1.2560 0.8484 ## U.HR ## Duration 1.0000 ## Radiation 1.2533 ## Onset 1.2854 ## Function 1.0799 ## Age 1.0062 ## Previous 1.3378 ## Tampascale 1.0036 ## JobControl 1.0080 ## JobDemand 1.0086 ## Social 0.9973 ## factor(Expect_cat)2 2.0053 ## factor(Expect_cat)3 1.8595 ## ## Pooled p-values (D1 &amp; RR) ## Chi.sq Pooled.P.value ## Duration 3.797 0.0513 ## Radiation 0.238 0.6258 ## Onset 0.283 0.5944 ## Function 6.781 0.0092 ## Age 1.332 0.2485 ## Previous 0.249 0.6176 ## Tampascale 2.888 0.0893 ## JobControl 1.002 0.3168 ## JobDemand 1.977 0.1597 ## Social 4.276 0.0387 ## factor(Expect_cat) 0.728 0.4829 ## ## Final results of Pooled model ## with a p-value of 1 The pooled p-values are shown in the table tha is called “Pooled p-values (D1 &amp; RR)”. For the categorical variable factor(Expect_cat), the p-value is pooled using method “D1” and for all other variables Rubin’s ules are used. These p-values are the same as the p-values in the “Pooled model (Rubin’s Rules)” table above in the output. You can set print.method = TRUE to obtain the pooled p-values by method “D1” for all variables. For more information of the possibilities of pooling logistic and Cox regression models with the psfmi package see ?psfmi::psfmi_lr or ?psfmi::psfmi_coxr. 6.4 Variable selection Prediction models are frequently developed by using selection procedures in logistic and Cox regression models. As a selection procedure, backward selection is recommended (Moons et al 2015). Predictor selection in multiple imputed datasets may be challenging. Predictor selection in each imputed dataset separately, may result in a different set of selected variables. Royston (2008) showed that the best choice to select predictors from multiply imputed datasets is to select from the pooled model, i.e. the model that is estimated in each imputed dataset and subsequently regression coefficients are pooled. From these pooled estimates the backward selection procedure can start. This is possible in SPSS when the model includes continuous and dichotomous variables. This is however not possible in SPSS when the model contains categorical variables. Because categorical variables are estimated and selected by using an overall Wald Chi-square value and as we have seen in paragraph 6.2, these Chi-square tests cannot be pooled in SPSS. This makes variable selection when categorical variables are included, not possible in SPSS. We have therefore developed an R package, that contains functions to select predictors multiple imputed datasets and we have integrated the pooling procedures that were discussed in the previous paragraphs within these predictor selection functions. We will discuss these functions in the next paragraphs by running the code and we will discuss the output. The package can be installed via the Github website (code to install the packages will be provided below). As an example, we will use a dataset of 426 patients who received a new hip after a hip fracture. The outcome is recovery at 6 months which was defined as 1=no recovery and 0 = recovery. All functions work more or less in the same way and comparable function parameter settings are used. We start by showing the parameters settings that are used in these functions. 6.4.1 Predictor Selection functions in R The functions are developed for Logistic and Cox regression models. They are called: psfmi.log psfmi.log.MR psfmi.cox To activate these functions, you have to install the psfmi package from the Github website. Before that you have to install and activate the devtools package. The following code in the Console window can be used: ## voorbeeld laten zien voor predictor selectio met psfmi package - verder niet uitwijden over inhoud. Alleen voorbeeld laten zien! 6.5 Interaction terms in model When the analysis model contains an interaction term, and one of the variables that is part of the interaction term contain missing data, it is important to pay extra attention to the imputation procedure. The challenge in this situation is that the imputation model should also include the interaction term, otherwise the imputation model is not compatible with the analysis model and this results in incorrect imputed values. For example, the relationship between (body)weight and blood pressure, with gender as effect modifier. The main aim of this model is to study the relationship between (body)weight and blood pressure. The interaction term between (body)weight and gender investigates whether this relationship depends on gender, i.e. is stronger or less strong for males compared to females. The analysis model is: SBP=β_0+β_1×BodyWeight+β_2×Gender+β_3×BodyWeight×Gender Assume now that there is missing data in the weight variable. As a result, there will also be missing data in the interaction term between weight and gender. When an imputation model only includes the following formula: 〖BodyWeight〗_mis=β_0+β_1×SBP+β_2×Gender The imputation model is not consistent (not compatible) with the analysis model and would therefore not be able to generate valid imputations. We have to use an imputation model that includes the interaction term, such as: 〖BodyWeight〗_mis=β_0+β_1×SBP+β_2×Gender+ β_3×〖BodyWeight〗_mis×Gender The imputation of weight should take the interaction between weight and gender in relation to blood pressure into account. A method that we can apply is that we impute the relationship between blood pressure and weight separately for males and females. That way, we account for the possibility that the relationship between weight and blood pressure differs between males and females and the imputed values can then differ too. Not taking into account this interaction during the imputation process will result in biased coefficients and standard error estimates (Bartlett et al. 2015). The steps that we have to follow to impute the missing data in the weight variable in SPSS, taking into account the interaction between weight and gender is illustrated in the next paragraph. 6.5.1 Imputation of interaction terms in SPSS To impute the missing data in the Bodyweight variable in the example, the fact that the relation between bodyweight and blood pressure depends on gender needs to be taken into account in the imputation. This can be done by using the Split file procedure in SPSS. The example dataset contains information about the variables that are presented in 6.2. Figure 6.2: Bodyweight dataset with missing values in the Bodyweight variable. Compare Groups and move the Gender variable to the window: Group based on, then click OK. In the right corner below it you see the information “Split by Gender”, which means that for the next analyses procedures the procedures will be done separately for males and females. Figure 6.3: The Split File procedure in SPSS. Perform MI and use all variables in the imputation model, except for the Gender variable. Because the Gender variable was used as a split variable it cannot be included in the imputation model. MI will now be separately performed for Males and Females. Set M=20, use Predictive Mean Matching and 50 iterations and store the imputed datasets in the file Imp_Bodyweight. In the SPSS output file, in the Imputation Results and the Imputation Models tables you can check that the imputation process was performed for males and females separately. Figure 6.4: Imputation models, splitted for males and Females Compute the Interaction term of Bodyweight times Gender in the dataset that contains the imputed values.Now turn on the split on the variable Imputation_. That will automatically turn off the split on the Gender variable in the imputed datasets (in the Data View window of the imputed datasets in the corner on the right below you see the statement “Split by Imputation_ Gender”. To include the variable Gender in the model we first have to unsplit the data by Gender). Then the analysis can be performed as planned with th interaction term as one of the predictors. 6.5.2 Imputation of interaction terms in R The split file procedure that we used in SPSS in the previous paragraph to impute missing data and to take interaction terms into account can also be applied in R. First you have to split the data, impute the missing values, merge the data again and generate the interaction term in the dataset . Then results of the analysis model can be pooled. There is also another procedure in R that can be used. This procedure is called Substantive Model Compatible Fully Conditional Specification (SMC-FCS). This is a fairly complex procedure that can generate valid imputations by taking into account interaction terms. More about this procedure can be found in the technical paper of Bartlett et al.( 2015). To apply the procedure we need the smcfcs function which is available in the smcfs package (Bartlett, 2015). To get pooled analysis results we also have to install the mitoolspackage. An example of using the SMC-FCS is presented below. # Read in SPSS File &quot;BodyWeight&quot; and assign to object set #set &lt;- read.spss(file = &quot;BodyWeight.sav&quot;, to.data.frame = T) ##IE: change to haven package #set &lt;- set[, -1]## do this in prediction model - otherwise ID variable is lost! #et$Int &lt;- set$Bodyweight*set$Gender # Perform SMCFCS, set seed to reproduce results # impute missing values, taking account of the interaction term #imp.smcfcs &lt;- smcfcs(set, smtype=&quot;lm&quot;, m=5, numit=10, rjlimit=2000, # smformula=&quot;SBP ~ Bodyweight + Gender + Int&quot;, # method=c(&quot;&quot;,&quot;&quot;,&quot;&quot;,&quot;&quot;,&quot;&quot;, &quot;norm&quot;,&quot;Bodyweight*Gender&quot;)) # fit analysis model and get pooled results #smcfcs.model &lt;- imputationList(imp.smcfcs$impDatasets) # model.res &lt;- with(smcfcs.model, lm(SBP~ Bodyweight + Gender + Int)) # summary(MIcombine(model.res)) We are currently updating this Chapter. References "]
]
